<script type="text/javascript">
  const files = {{{ files }}} || []
</script>

<script src="https://cdn.jsdelivr.net/npm/mark.js@8.11.1/dist/mark.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/showdown@1.9.0/dist/showdown.min.js"></script>

<script defer src="https://cdn.jsdelivr.net/npm/katex@0.10.0/dist/katex.min.js" integrity="sha384-K3vbOmF2BtaVai+Qk37uypf7VrgBubhQreNQe9aGsz9lB63dIFiQVlJbr92dw2Lx" crossorigin="anonymous"></script>
<script defer src="https://cdn.jsdelivr.net/npm/katex@0.10.0/dist/contrib/auto-render.min.js" integrity="sha256-CiPSQ9n316ms9u5yYJ092wI+FeybXvesfbnOUvSRvYA=" crossorigin="anonymous"></script>

<script type="module" defer>
  import { html, Component, render } from 'https://unpkg.com/htm/preact/standalone.mjs'

  showdown.setFlavor('github')
  const markdownRenderer = new showdown.Converter()
  let filter = ''
  let currentFile = null
  const defaultPreview = '```\nSelect a document to continue\n```'

  const changeFilter = e => {
    filter = e.target.value
    renderApp()
  }
  class Search extends Component {
    render ({ search }, state) {
      return html`<input type='text' class='search' placeholder='Filter Documents...' value={${search}} onInput={${e => changeFilter(e) }} />`
    }
  }

  class FileItem extends Component {
    render({ file }, state) {
      return html`
        <button class="file-list-item" onClick={${() => { currentFile = file; renderApp() }}}>
          <span class="file-name">${file.path.split('\\').pop().split('/').pop()}</span>
          <span class="file-contents">${file.contents.substring(0, 100)}...</span>
        </button>
      `
    }
  }

  class SideBar extends Component {
    render({ allFiles, search }, state) {
      return html`
        <div>
          ${allFiles.map(f => html`<${FileItem} file={${f}} />`)}
        </div>
      `;
    }
  }

  class Preview extends Component {
    render(props, state) {
      return html`
        <div id='preview-contents'>
          &nbsp;
        </div>
      `;
    }
  }

  class App extends Component {
    render ({ allFiles, search }, state) {
      return html`
        <div id="main">
          <div><${Search} search={${search}} /></div>
          <div class="wrapper">
            <div id="sidebar">
              <${SideBar} allFiles={${allFiles}} search={${search}} />
            </div>
            <div id="preview">
              <${Preview} />
            </div>
          </div>
        </div>
      `
    }
  }

  const renderApp = () => {
    // render the application
    let md = (currentFile || {}).contents || defaultPreview

    // filter files
    const filtered = filter.length > 0
      ? files.filter(f => f.path.toLowerCase().indexOf(filter) >= 0 || f.contents.toLowerCase().indexOf(filter) >= 0)
      : files

    render(html`<${App} allFiles={${filtered}} search={${filter}} />`, document.body)

    // add in markdown
    document.getElementById('preview-contents').innerHTML = markdownRenderer.makeHtml(md)

    // render maths
    renderMathInElement(document.getElementById('preview-contents'), {
      display: true,
      throwOnError: false,
      errorColor: '#ff0000'
    })
  }

  renderApp();
</script>